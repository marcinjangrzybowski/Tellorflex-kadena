(load "../autopay-setup.repl")

(print "*****************************************")
(print "Function test: get-funded-query-ids")
(begin-tx)
(namespace (read-msg "ns"))
(expect "No funded query ids" 0 (length (autopay.get-funded-query-ids)))
;  tip query id 1
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [eth,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [eth,usd]}"))
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}")))))
    (expect "There should be 1 funded query id" 1 (length funded-query-ids))
    (expect "Should be correct query id" (hash (base64-encode "{SpotPrice: [eth,usd]}")) (at 0 funded-query-ids))
    (expect "Index of funded query-id should be 1" 1 index)
)
; Tip queryId 1 again and all numbers should be the same
(env-chain-data {'block-time: (h.advanceTime 1)})
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [eth,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [eth,usd]}"))
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}")))))
    (expect "There should be 1 funded query id" 1 (length funded-query-ids))
    (expect "Should be correct query id" (hash (base64-encode "{SpotPrice: [eth,usd]}")) (at 0 funded-query-ids))
    (expect "Index of funded query-id should be 1" 1 index)
)
;  Tip query id 2
(env-chain-data {'block-time: (h.advanceTime 1)})
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [btc,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [btc,usd]}"))
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}")))))
    (expect "There should be 2 funded query id" 2 (length funded-query-ids))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [eth,usd]}")) (at 0 funded-query-ids))
    (expect "Should be correct query id at index 1" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 1 funded-query-ids))
    (expect "Index of first funded query-id should be 1" 1 index1)
    (expect "Index of second funded query-id should be 2" 2 index2)
)
;  Tip query id 2 again and numbers should be the same
(env-chain-data {'block-time: (h.advanceTime 1)})
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [btc,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [btc,usd]}"))
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}")))))
    (expect "There should be 2 funded query id" 2 (length funded-query-ids))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [eth,usd]}")) (at 0 funded-query-ids))
    (expect "Should be correct query id at index 1" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 1 funded-query-ids))
    (expect "Index of first funded query-id should be 1" 1 index1)
    (expect "Index of second funded query-id should be 2" 2 index2)
)
;  Tip query id 3
(env-chain-data {'block-time: (h.advanceTime 1)})
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [trb,usd]}"))
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}")))))
    (expect "There should be 3 funded query id" 3 (length funded-query-ids))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [eth,usd]}")) (at 0 funded-query-ids))
    (expect "Should be correct query id at index 1" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 1 funded-query-ids))
    (expect "Should be correct query id at index 2" (hash (base64-encode "{SpotPrice: [trb,usd]}")) (at 2 funded-query-ids))
    (expect "Index of first funded query-id should be 1" 1 index1)
    (expect "Index of second funded query-id should be 2" 2 index2)
    (expect "Index of third funded query-id should be 3" 3 index3)
)
;  Tip query id 4
(env-chain-data {'block-time: (h.advanceTime 1)})
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [kda,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [kda,usd]}"))
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}"))))
      (index4 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [kda,usd]}")))))
    (expect "There should be 4 funded query id" 4 (length funded-query-ids))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [eth,usd]}")) (at 0 funded-query-ids))
    (expect "Should be correct query id at index 1" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 1 funded-query-ids))
    (expect "Should be correct query id at index 2" (hash (base64-encode "{SpotPrice: [trb,usd]}")) (at 2 funded-query-ids))
    (expect "Should be correct query id at index 3" (hash (base64-encode "{SpotPrice: [kda,usd]}")) (at 3 funded-query-ids))
    (expect "Index of first funded query-id should be 1" 1 index1)
    (expect "Index of second funded query-id should be 2" 2 index2)
    (expect "Index of third funded query-id should be 3" 3 index3)
    (expect "Index of fourth funded query-id should be 4" 4 index4)
)
(tellorflex.submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter-1")
(tellorflex.submit-value
    (hash (base64-encode "{SpotPrice: [btc,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [btc,usd]}")  "reporter2-keyset")
(tellorflex.submit-value
    (hash (base64-encode "{SpotPrice: [trb,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [trb,usd]}")  "reporter3-keyset")
(tellorflex.submit-value
    (hash (base64-encode "{SpotPrice: [kda,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [kda,usd]}")  "reporter4-keyset")
(env-chain-data {"block-time": (h.advanceTime (* 3601 12))})
(autopay.claim-one-time-tip "reporter-1" 
        (hash (base64-encode "{SpotPrice: [eth,usd]}")) [(- (h.blockTime) (* 3601 12))])
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}"))))
      (index4 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [kda,usd]}")))))
    (expect "There should be 3 funded query id" 3 (length funded-query-ids))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [kda,usd]}")) (at 0 funded-query-ids))
    (expect "Should be correct query id at index 1" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 1 funded-query-ids))
    (expect "Should be correct query id at index 2" (hash (base64-encode "{SpotPrice: [trb,usd]}")) (at 2 funded-query-ids))
    (expect "Index of claimed tip's query id should be 0" 0 index1)
    (expect "Index of second funded query-id should be 2" 2 index2)
    (expect "Index of third funded query-id should be 3" 3 index3)
    (expect "Index of fourth funded query-id should be 1 since claimed tip gets replaced by list item in list" 1 index4)
)
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
;  Tip query id 2 a third time
(env-chain-data {'block-time: (h.advanceTime 1)})
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [btc,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [btc,usd]}"))
(autopay.claim-one-time-tip "reporter2-keyset" 
    (hash (base64-encode "{SpotPrice: [btc,usd]}")) [(- (- (h.blockTime) (* 3601 12)) 1)])
;  everything should stay the same after tip is claimed since the there was an additional tip
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}"))))
      (index4 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [kda,usd]}")))))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [kda,usd]}")) (at 0 funded-query-ids))
    (expect "Should be correct query id at index 1" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 1 funded-query-ids))
    (expect "Should be correct query id at index 2" (hash (base64-encode "{SpotPrice: [trb,usd]}")) (at 2 funded-query-ids))
    (expect "Index of claimed tip's query id should be 0" 0 index1)
    (expect "Index of second funded query-id should be 2" 2 index2)
    (expect "Index of third funded query-id should be 3" 3 index3)
    (expect "Index of fourth funded query-id should be 1 since claimed tip gets replaced by list item in list" 1 index4)
    (expect "There should be 3 funded query ids after tip is claimed" 3 (length funded-query-ids))
)
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
(autopay.claim-one-time-tip "reporter3-keyset" 
    (hash (base64-encode "{SpotPrice: [trb,usd]}")) [(- (- (h.blockTime) (* 3601 12)) 1)])
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}"))))
      (index4 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [kda,usd]}")))))
    (expect "There should be 2 funded query id" 2 (length funded-query-ids))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [kda,usd]}")) (at 0 funded-query-ids))
    (expect "Should be correct query id at index 1" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 1 funded-query-ids))
    (expect "Index of claimed tip's query id should be 0" 0 index1)
    (expect "Index of second funded query-id should be 2" 2 index2)
    (expect "Index of third funded query-id should be 0 since tip was claimed" 0 index3)
    (expect "Index of fourth funded query-id should be 1" 1 index4)
)
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
(autopay.claim-one-time-tip "reporter4-keyset" 
    (hash (base64-encode "{SpotPrice: [kda,usd]}")) [(- (- (h.blockTime) (* 3601 12)) 1)])
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}"))))
      (index4 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [kda,usd]}")))))
    (expect "There should be 1 funded query id" 1 (length funded-query-ids))
    (expect "Should be correct query id at index 0" (hash (base64-encode "{SpotPrice: [btc,usd]}")) (at 0 funded-query-ids))
    (expect "Index of first funded query id should be 0" 0 index1)
    (expect "Index of second funded query-id should be 1" 1 index2)
    (expect "Index of third funded query-id should be 0 since tip was claimed" 0 index3)
    (expect "Index of fourth funded query-id should be 0" 0 index4)
)
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
;  submit value for query id 2's extra tip
(tellorflex.submit-value
    (hash (base64-encode "{SpotPrice: [btc,usd]}"))
    (base64-encode (h.priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [btc,usd]}")  "reporter2-keyset")
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
;  advance 12 hours
(env-chain-data {"block-time": (h.advanceTime (* 3601 12))})
(autopay.claim-one-time-tip "reporter2-keyset" 
    (hash (base64-encode "{SpotPrice: [btc,usd]}")) [(- (h.blockTime) (* 3601 12))])
;  All indices nums in query-ids-with-funding-index should be 0
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}"))))
      (index4 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [kda,usd]}")))))
    ;    all tips were claimed
    (expect "There should be 0 funded query ids" 0 (length funded-query-ids))
    (expect "Index of first funded query id should be 0" 0 index1)
    (expect "Index of second funded query-id should be 0" 0 index2)
    (expect "Index of third funded query-id should be 0 " 0 index3)
    (expect "Index of fourth funded query-id should be 0" 0 index4)
)
(commit-tx)
(begin-tx)
(namespace (read-msg "ns"))
;  Tip a query id
(autopay.tip "user-keyset" 
    (hash (base64-encode "{SpotPrice: [kda,usd]}")) 
    (h.precision 1) (base64-encode "{SpotPrice: [kda,usd]}"))
(let ((funded-query-ids (autopay.get-funded-query-ids))
      (index1 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [eth,usd]}"))))
      (index2 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [btc,usd]}"))))
      (index3 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [trb,usd]}"))))
      (index4 (autopay.get-query-ids-with-funding-index (hash (base64-encode "{SpotPrice: [kda,usd]}")))))
    (expect "There should be 1 funded query id" 1 (length funded-query-ids))
    (expect "Index of first funded query id should be 0" 0 index1)
    (expect "Index of second funded query-id should be 0" 0 index2)
    (expect "Index of third funded query-id should be 0" 0 index3)
    (expect "Index of fourth kda/usd query id should be 1" 1 index4)
)
(commit-tx)