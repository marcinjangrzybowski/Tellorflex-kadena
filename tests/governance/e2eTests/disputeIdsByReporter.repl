(load "../governance-setup.repl")

;  *******************************************************************
  (print "***************************************************************************************")
  (print "Test array of dispute ids by reporter address")
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use h)
  (deposit-stake
    "reporter-1"
    (describe-keyset "free.reporter-1")
    (precision 20))
  (deposit-stake
    "reporter2-keyset"
    (describe-keyset "free.reporter2-keyset")
    (precision 20))

  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (priceConversion 100.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter-1")
  (env-chain-data {'block-time: (advanceTime 1)})
  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (priceConversion 200.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter2-keyset")
  (begin-dispute
    "user-keyset"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (- (blockTime) 1))

  (let* ((reporter-disputes
          (get-disputes-by-reporter "reporter-1")) )
      (expect "Should be one dispute id" 1 (length reporter-disputes))
      (expect  "Dispute id should be correct" 1 (at 0 reporter-disputes))
  )
  (expect-failure "row not found: reporter2-keyset"
    (get-disputes-by-reporter "reporter2-keyset"))
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use h)
  (begin-dispute
    "user-keyset"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (blockTime))
  (let* ((reporter-disputes
          (get-disputes-by-reporter "reporter2-keyset")) )
      (expect "Should be one dispute id" 1 (length reporter-disputes))
      (expect  "Dispute id should be correct" 2 (at 0 reporter-disputes))
  )
  (env-chain-data {'block-time: (advanceTime (* 86400 2))})
  (tally-votes 1)
  (commit-tx)
  (begin-tx)
  (namespace (read-msg "ns"))
  (use governance) (use tellorflex) (use h)
  (begin-dispute
    "user-keyset"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (- (- (blockTime) (* 86400 2)) 1))

  (let* ((reporter-disputes
          (get-disputes-by-reporter "reporter-1")) )
      (expect "Should be one dispute id" 2 (length reporter-disputes))
      (expect  "Dispute id should be correct" 1 (at 0 reporter-disputes))
      (expect  "Dispute id should be correct" 3 (at 1 reporter-disputes))
  )
  (env-chain-data {'block-time: (advanceTime 3)})
  (submit-value
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (base64-encode (priceConversion 300.0)) 0
    (base64-encode "{SpotPrice: [eth,usd]}")  "reporter2-keyset")

  (begin-dispute
    "user-keyset"
    (hash (base64-encode "{SpotPrice: [eth,usd]}"))
    (blockTime))
  (commit-tx)
