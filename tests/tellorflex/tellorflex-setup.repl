;  Setup keysets and load contracts
;  https://github.com/thomashoneyman/real-world-pact/tree/main/01-faucet-contract learned alot from this repo.

(env-data { "namespace-keyset": { "keys": [ ], "pred": "keys-all" }, "test-keyset": { "keys": [ ], "pred": "keys-all" } })
(begin-tx) ;txn 0
(define-namespace "free" (read-keyset "test-keyset") (read-keyset "namespace-keyset"))
(commit-tx)

(env-data {})

(begin-tx) ;txn 1
(load "../../root/fungible-v2.pact")
(load "../../root/fungible-xchain-v1.pact")
(load "../../root/coin-v5.pact")

(create-table coin.coin-table)
(create-table coin.allocation-table)
(commit-tx)

(env-data { "tellor-admin-keyset": { "keys": [ "tellor-keyset-public-key" ], "pred": "keys-all" }, "upgrade": false })
(env-sigs [{"key": "tellor-keyset-public-key", "caps": []}])
;  load tellorflex contract
(env-chain-data {'block-time: (time "2022-12-21T21:26:41Z")})

(begin-tx) ;txn 2
(load "../../i-governance.pact")
(load "../../i-flex.pact")
(load "../../tellorflex.pact")
(load "../../governance.pact")
(load "../../testing/governance-mock.pact")

; tellorflex(oracle) tables
(create-table tellorflex.global-variables)
(create-table tellorflex.reports)
(create-table tellorflex.staker-details)
(create-table tellorflex.reports-submitted-count)
(create-table tellorflex.timestamps)
(create-table tellorflex.governance-table)
(create-table tellorflex.gov-guard)
; governance tables
(create-table governance.dispute-info)
(create-table governance.vote-info)
(create-table governance.vote-rounds)
(create-table governance.open-disputes-on-id)
(create-table governance.global)

(create-table governance-mock.global)
(create-table governance-mock.vote-table)
(create-table governance-mock.vote-tally)

(free.tellorflex.constructor
  coin ;Token contract
  43200 ;Reporting lock
  (* 500 (^ 10 18)) ;Staking target price
  (* 50 (^ 10 18)) ;Staking token price
  (* 100 (^ 10 18)) ;Minimum stake amount
  (hash (base64-encode "{SpotPrice: [trb,usd]}")) ;Staking token query id
  )
(free.governance.init-global
  free.tellorflex ;Oracle contract
  coin ;Token contract
  )
(free.governance-mock.constructor free.tellorflex)
; Check governance address not initialized in tellorflex
(expect-failure "row not found" (free.tellorflex.get-governance-module))
; Input governance address in tellorflex
(free.tellorflex.init free.governance-mock)
; Additional step that stores governance guard in tellorflex (Owner only)
(free.governance.call-tellorflex)
; Expect failure when trying to input governance address again
(expect-failure "row found for key" (free.tellorflex.init "governance place holder"))
(commit-tx)
(begin-tx)
(namespace "free")
(module h "free.tellor-admin-keyset"
  (defun advanceTime (seconds)
   (add-time (at 'block-time (chain-data)) seconds)
  )
  (defun precision (number)
    (* number (^ 10 18))
  )
  (defun trbPrice (multiplier) (priceConversion (* 50.0 multiplier)))
  (defun priceConversion (price:decimal)
    (int-to-str 10 (round (* price (^ 10 18))))
  )
  (defun blockTime ()
    (str-to-int 10 (format-time "%s" (at 'block-time (chain-data))))
  )
)
(commit-tx)
;  clear environment metadata
(env-sigs [])
(env-data {})
;  insert fake reporter keysets
(env-data {
  "reporter1-keyset": { "keys": [ "reporter1-public-key" ] },
  "reporter2-keyset": { "keys": [ "reporter2-public-key" ] },
  "reporter3-keyset": { "keys": [ "reporter3-public-key" ] },
  "reporter4-keyset": { "keys": [ "reporter4-public-key" ] },
  "reporter5-keyset": { "keys": [ "reporter5-public-key" ] },
  "user-keyset": { "keys": [ "user-public-key" ] }})
(env-sigs [
  {"key": "reporter1-public-key", "caps": []},
  {"key": "reporter2-public-key", "caps": []},
  {"key": "reporter3-public-key", "caps": []},
  {"key": "reporter4-public-key", "caps": []},
  {"key": "reporter5-public-key", "caps": []},
  {"key": "user-public-key", "caps": []}])
;  create and define user keyset in free namespace
(begin-tx) ;txn 3
(namespace "free")
(define-keyset "free.reporter1-keyset" (read-keyset "reporter1-keyset"))
(define-keyset "free.reporter2-keyset" (read-keyset "reporter2-keyset"))
(define-keyset "free.reporter3-keyset" (read-keyset "reporter3-keyset"))
(define-keyset "free.reporter4-keyset" (read-keyset "reporter4-keyset"))
(define-keyset "free.reporter5-keyset" (read-keyset "reporter5-keyset"))
(define-keyset "free.user-keyset" (read-keyset "user-keyset"))
(commit-tx)
(env-sigs [])
(env-data {})

(begin-tx) ;txn 4
;  create accounts in coin for reporters to recieve funds
; (coin.create-account "tellorflex" (free.tellorflex.module-assets))
(coin.create-account "reporter1-keyset" (describe-keyset "free.reporter1-keyset"))
(coin.create-account "reporter2-keyset" (describe-keyset "free.reporter2-keyset"))
(coin.create-account "reporter3-keyset" (describe-keyset "free.reporter3-keyset"))
(coin.create-account "reporter4-keyset" (describe-keyset "free.reporter4-keyset"))
(coin.create-account "reporter5-keyset" (describe-keyset "free.reporter5-keyset"))
(coin.create-account "user-keyset" (describe-keyset "free.user-keyset"))

;  fake capability(only available in testing) then mint tokens
(test-capability (coin.COINBASE))
(coin.coinbase "reporter1-keyset" (describe-keyset "free.reporter1-keyset") 1000.0)
(coin.coinbase "reporter2-keyset" (describe-keyset "free.reporter2-keyset") 1000.0)
(coin.coinbase "reporter3-keyset" (describe-keyset "free.reporter3-keyset") 100.0)
(coin.coinbase "reporter4-keyset" (describe-keyset "free.reporter4-keyset") 100.0)
(coin.coinbase "reporter5-keyset" (describe-keyset "free.reporter5-keyset") 5000.0)
(coin.coinbase "user-keyset" (describe-keyset "free.user-keyset") 1000.0)
(commit-tx)

(env-gasmodel "table")
(env-gaslimit 150000)

(print "----------")
(print "'reporter1' account created:\n  - keyset: 'reporter1-keyset'\n  - public key: 'reporter1-public-key'\n  - balance: 1000.0 KDA")
(print "'reporter2' account created:\n  - keyset: 'reporter2-keyset'\n  - public key: 'reporter2-public-key'\n  - balance: 1000.0 KDA")
(print "'reporter3' account created:\n  - keyset: 'reporter3-keyset'\n  - public key: 'reporter3-public-key'\n  - balance: 1000.0 KDA")
(print "'reporter4' account created:\n  - keyset: 'reporter4-keyset'\n  - public key: 'reporter4-public-key'\n  - balance: 1000.0 KDA")
(print "'reporter5' account created:\n  - keyset: 'reporter5-keyset'\n  - public key: 'reporter5-public-key'\n  - balance: 1000.0 KDA")
(print "'user' account created:\n  - keyset: 'user-keyset'\n  - public key: 'user-public-key'\n  - balance: 1000.0 KDA")
(print "----------")
